/*
Students at your hometown high school have decided to organize their social network using databases. 
So far, they have collected information about sixteen students in four grades, 9-12. Here's the schema:

Highschooler ( ID, name, grade )
English: There is a high school student with unique ID and a given first name in a certain grade.

Friend ( ID1, ID2 )
English: The student with ID1 is friends with the student with ID2. Friendship is mutual, so if (123, 456) is in the Friend table, so is (456, 123).

Likes ( ID1, ID2 )
English: The student with ID1 likes the student with ID2. Liking someone is not necessarily mutual, so if (123, 456) is in the Likes table, 
there is no guarantee that (456, 123) is also present.

Your queries will run over a small data set conforming to the schema. View the database. (You can also download the schema and data.)

For your convenience, here is a graph showing the various connections between the students in our database. 
9th graders are blue, 10th graders are green, 11th graders are yellow, and 12th graders are purple. 
Undirected black edges indicate friendships, and directed red edges indicate that one student likes another student.
*/


-- Find the names of all students who are friends with someone named Gabriel.
select distinct H2.name 
from Highschooler H1, Friend F1, Highschooler H2 
where H1.ID = F1.ID1 and H1.name = 'Gabriel' and H2.ID = F1.ID2

/*
For every student who likes someone 2 or more grades younger than themselves, 
return that student's name and grade, and the name and grade of the student they like
*/
select distinct H1.name, H1.grade, H2.name, H2.grade
from Highschooler H1, Likes F1, Highschooler H2 
where H1.ID = F1.ID1 and H1.grade - H2.grade > 1 and H2.ID = F1.ID2

/*
For every pair of students who both like each other, return the name and grade of both students. 
Include each pair only once, with the two names in alphabetical order.
*/

select H1.name, H1.grade, H2.name, H2.grade 
from Highschooler H1, Highschooler H2, Likes L1, Likes L2 
where H1.ID = L1.ID1 and H2.ID = L1.ID2 and 
      L1.ID1 = L2.ID2 and L1.ID2 = L2.ID1 
      and H1.name < H2.name

/*
Find all students who do not appear in the Likes table (as a student who likes or is liked) 
and return their names and grades. Sort by grade, then by name within each grade.
*/
select distinct name, grade 
from Highschooler, Likes 
where Highschooler.ID not in (select ID1 from Likes ) and Highschooler.ID not in (select ID2 from Likes )
group by grade, name

/*
For every situation where student A likes student B, but we have no information about whom B likes (that is, 
B does not appear as an ID1 in the Likes table), return A and B's names and grades.
*/
SELECT H1.name, H1.grade, H2.name, H2.grade
FROM Highschooler H1
INNER JOIN Likes ON H1.ID = Likes.ID1
INNER JOIN Highschooler H2 ON H2.ID = Likes.ID2
WHERE (H1.ID = Likes.ID1 AND H2.ID = Likes.ID2) AND H2.ID NOT IN (
  SELECT DISTINCT ID1
  FROM Likes
);

/*
Find names and grades of students who only have friends in the same grade. 
Return the result sorted by grade, then by name within each grade.
*/
SELECT name, grade
FROM Highschooler H1
WHERE ID NOT IN (
  SELECT ID1
  FROM Friend, Highschooler H2
  WHERE H1.ID = Friend.ID1 AND H2.ID = Friend.ID2 AND H1.grade <> H2.grade
)
ORDER BY grade, name;

/*
For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). 
For all such trios, return the name and grade of A, B, and C.
*/
SELECT DISTINCT H1.name, H1.grade, H2.name, H2.grade, H3.name, H3.grade
FROM Highschooler H1, Highschooler H2, Highschooler H3, Likes L, Friend F1, Friend F2
WHERE (H1.ID = L.ID1 AND H2.ID = L.ID2) AND H2.ID NOT IN (
  SELECT ID2
  FROM Friend
  WHERE ID1 = H1.ID
) AND (H1.ID = F1.ID1 AND H3.ID = F1.ID2) AND (H2.ID = F2.ID1 AND H3.ID = F2.ID2);


/*
Find the difference between 
the number of students in the school and the number of different first names.
*/
SELECT COUNT(*) - COUNT(DISTINCT name)
FROM Highschooler;

/*
Find the name and grade of all students who are liked by more than one other student
*/
SELECT name, grade
FROM Highschooler
INNER JOIN Likes ON Highschooler.ID = Likes.ID2
GROUP BY ID2
HAVING COUNT(*) > 1;

/*
Students at your hometown high school have decided to organize their social network using databases. So far, they have collected information about sixteen students in four grades, 9-12. Here's the schema:

Highschooler ( ID, name, grade )
English: There is a high school student with unique ID and a given first name in a certain grade.

Friend ( ID1, ID2 )
English: The student with ID1 is friends with the student with ID2. Friendship is mutual, so if (123, 456) is in the Friend table, so is (456, 123).

Likes ( ID1, ID2 )
English: The student with ID1 likes the student with ID2. Liking someone is not necessarily mutual, so if (123, 456) is in the Likes table, there is no guarantee that (456, 123) is also present.

Your modifications will run over a small data set conforming to the schema. View the database. (You can also download the schema and data.)

For your convenience, here is a graph showing the various connections between the people in our database. 9th graders are blue, 10th graders are green, 11th graders are yellow, and 12th graders are purple. Undirected black edges indicate friendships, and directed red edges indicate that one person likes another person.

*/

/*
Q1: It's time for the seniors to graduate. Remove all 12th graders from Highschooler
*/
DELETE FROM Highschooler
WHERE grade = 12;







